#!/usr/bin/env zsh

# zsh setup

[[ $- != *i* ]] && return

## Set toolbox if not set already

# if [ -z "$container" ]; then
#     command -v toolbox &>/dev/null && exec toolbox enter dev
# fi

## Set tmux if not set already

if [ "$TERM_PROGRAM" != "tmux" ]; then
    command -v tmux &>/dev/null && exec tmux
fi

## Set vi mode

set -o vi

## Setup search backward

bindkey -v
bindkey '^R' history-incremental-search-backward

## Clear screen

clear-scrollback-and-screen () {
  zle clear-screen
  tmux clear-history
}
zle -N clear-scrollback-and-screen
bindkey -v '^L' clear-scrollback-and-screen

## Z plug

[ -f /usr/share/zsh/scripts/zplug/init.zsh ] && . /usr/share/zsh/scripts/zplug/init.zsh

## Setup default editor

export EDITOR=nvim

## Setup PATH variable

prepend_path() {
    PATH=$(echo "$PATH" | sed -E "s|(^\\|:)$1(:\\|$)||g")
    export PATH="$1:$PATH"
}

### Global binaries

prepend_path "/bin"
prepend_path "/sbin"
prepend_path "/usr/bin"
prepend_path "/usr/sbin"
prepend_path "/var/lib/snapd/snap/bin"
prepend_path "/snap/bin"
prepend_path "$HOME/.surrealdb"

### Python
command -v conda &>/dev/null && conda activate base

### Haskell

[ -f "/home/kurisu/.ghcup/env" ] && . "/home/kurisu/.ghcup/env"

### rust

prepend_path "$HOME/.cargo/bin"

### nodejs

PNPM_HOME="$HOME/.local/share/pnpm"
prepend_path "$PNPM_HOME"

NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

BUN_INSTALL="$HOME/.bun"
[ -s "$BUN_INSTALL/_bun" ] && source "$BUN_INSTALL/_bun"
prepend_path "$BUN_INSTALL/bin"

### go

GOPATH="$HOME/go"
prepend_path "$GOPATH/bin"

### ruby

[ -d "$HOME/.local/share/gem/ruby/" ] && for RUBY_PATH in "$HOME/.local/share/gem/ruby/"*; do
    [ -d "$RUBY_PATH/bin" ] && prepend_path "$RUBY_PATH/bin"
done
prepend_path "$HOME/bin"

### java

JAVA_HOME="/usr/lib/jvm/default"
prepend_path "$JAVA_HOME/bin"

### Global local binaries

prepend_path "/usr/local/bin"
prepend_path "/usr/local/sbin"
prepend_path "$HOME/.local/bin"


## Setup aliases

autoload -Uz compinit
compinit

command -v eza &>/dev/null && alias ls="eza --color=auto --icons --group-directories-first"
command -v bat &>/dev/null && alias cat="bat"
command -v shell-genie &>/dev/null && alias chat="shell-genie ask"
command -v kubectl &>/dev/null && alias k="kubectl"

command -v python3 &>/dev/null && randint() {
    python3 -c "import random; print(random.randint($1, $2))"
}

[ -f "$HOME/.local/bin/aliases.sh" ] && . "$HOME/.local/bin/aliases.sh"
[ -f "$HOME/.local/bin/functions.sh" ] && . "$HOME/.local/bin/functions.sh"

## Setup Desktop variables

DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u)/bus"
XDG_RUNTIME_DIR="/run/user/$(id -u)"

## Setup completions

command -v helm &>/dev/null && . <(helm completion zsh)
command -v kubectl &>/dev/null && . <(kubectl completion zsh)
command -v kind &>/dev/null && . <(kind completion zsh)
command -v minikube &>/dev/null && . <(minikube completion zsh)
command -v karmadactl &>/dev/null && . <(karmadactl completion zsh)
command -v cilium &>/dev/null && . <(cilium completion zsh)
command -v doctl &>/dev/null && . <(doctl completion zsh)
command -v ng &>/dev/null && . <(ng completion script)
command -v influx &>/dev/null && . <(influx completion zsh)
command -v arduino-cli &>/dev/null && . <(arduino-cli completion zsh)
command -v mgc &>/dev/null && . <(mgc completion zsh)
command -v uv &>/dev/null && . <(uv generate-shell-completion zsh)

## Setup mise

# [ -z "$VIRTUAL_ENV" ] && eval "$(mise activate zsh)"

## Load secrets

[ -f "$HOME/.local/bin/load-secrets.sh" ] && . "$HOME/.local/bin/load-secrets.sh"

## Export variables

export DBUS_SESSION_BUS_ADDRESS
export XDG_RUNTIME_DIR
export BUN_INSTALL
export PNPM_HOME
export GOPATH
export NVM_DIR

## Prompt

. <(starship init zsh)


# Begin: PlatformIO Core completion support
eval "$(_PIO_COMPLETE=zsh_source pio)"
# End: PlatformIO Core completion support


# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/kurisu/google-cloud-sdk/path.zsh.inc' ]; then . '/home/kurisu/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/kurisu/google-cloud-sdk/completion.zsh.inc' ]; then . '/home/kurisu/google-cloud-sdk/completion.zsh.inc'; fi

. "$HOME/.cargo/env"
